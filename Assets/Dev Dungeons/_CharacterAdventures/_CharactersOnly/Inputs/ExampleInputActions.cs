//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Dev Dungeons/_CharacterAdventures/_CharactersOnly/Inputs/ExampleInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CharacterAdventures
{
    public partial class @ExampleInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ExampleInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ExampleInputActions"",
    ""maps"": [
        {
            ""name"": ""ExampleMap"",
            ""id"": ""d7a09766-32cb-420c-98eb-eb32049da93d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1a1a6c9e-1e65-48de-b598-dab4a30aaa58"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79e84d95-6f3e-4549-a7a5-e8be41d59720"",
                    ""path"": ""*/{Primary2DMotion}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""64eda736-937d-4072-b810-6d7ce2088e41"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5d8d3026-697f-4dfa-ae13-90f0c1ce4e3b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""47c828e1-7412-4e49-838e-3e93233ae416"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ced40743-7bab-4f4f-8495-994baa7cc67f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""13bd9864-33c4-41b9-86c8-1e2c6bc1a9ea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ExampleMap
            m_ExampleMap = asset.FindActionMap("ExampleMap", throwIfNotFound: true);
            m_ExampleMap_Movement = m_ExampleMap.FindAction("Movement", throwIfNotFound: true);
        }

        ~@ExampleInputActions()
        {
            UnityEngine.Debug.Assert(!m_ExampleMap.enabled, "This will cause a leak and performance issues, ExampleInputActions.ExampleMap.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ExampleMap
        private readonly InputActionMap m_ExampleMap;
        private List<IExampleMapActions> m_ExampleMapActionsCallbackInterfaces = new List<IExampleMapActions>();
        private readonly InputAction m_ExampleMap_Movement;
        public struct ExampleMapActions
        {
            private @ExampleInputActions m_Wrapper;
            public ExampleMapActions(@ExampleInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_ExampleMap_Movement;
            public InputActionMap Get() { return m_Wrapper.m_ExampleMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ExampleMapActions set) { return set.Get(); }
            public void AddCallbacks(IExampleMapActions instance)
            {
                if (instance == null || m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }

            private void UnregisterCallbacks(IExampleMapActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
            }

            public void RemoveCallbacks(IExampleMapActions instance)
            {
                if (m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IExampleMapActions instance)
            {
                foreach (var item in m_Wrapper.m_ExampleMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ExampleMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ExampleMapActions @ExampleMap => new ExampleMapActions(this);
        public interface IExampleMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Dev Dungeons/_CharacterAdventures/_CharactersOnly/Inputs/ImpInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CharacterAdventures
{
    public partial class @ImpInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ImpInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ImpInputActions"",
    ""maps"": [
        {
            ""name"": ""ImpMap"",
            ""id"": ""b0774a44-91ff-4554-8423-4f3d384f11cd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9f185f42-a478-42b5-913e-35880a8d407b"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""4cf41479-17c6-4893-aa24-e21d7567768b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ef7e5cb-d271-4a6b-8809-e36011d92c70"",
                    ""path"": ""*/{Primary2DMotion}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4d0fcf68-a33a-4855-83da-505270c4612b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3938de64-ea9b-4cd4-8cb8-e3f6b59cdb77"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6ec0beae-0b9d-4e9c-9f94-4752ebe7380b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d18e1c20-90df-420f-ba46-1861df94ce78"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a69eed3f-8089-41ba-9a13-3be1c8d65e75"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""324f842c-4a47-4fbf-b151-f83b556ae724"",
                    ""path"": ""*/{SecondaryAction}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ImpMap
            m_ImpMap = asset.FindActionMap("ImpMap", throwIfNotFound: true);
            m_ImpMap_Movement = m_ImpMap.FindAction("Movement", throwIfNotFound: true);
            m_ImpMap_Aim = m_ImpMap.FindAction("Aim", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ImpMap
        private readonly InputActionMap m_ImpMap;
        private List<IImpMapActions> m_ImpMapActionsCallbackInterfaces = new List<IImpMapActions>();
        private readonly InputAction m_ImpMap_Movement;
        private readonly InputAction m_ImpMap_Aim;
        public struct ImpMapActions
        {
            private @ImpInputActions m_Wrapper;
            public ImpMapActions(@ImpInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_ImpMap_Movement;
            public InputAction @Aim => m_Wrapper.m_ImpMap_Aim;
            public InputActionMap Get() { return m_Wrapper.m_ImpMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ImpMapActions set) { return set.Get(); }
            public void AddCallbacks(IImpMapActions instance)
            {
                if (instance == null || m_Wrapper.m_ImpMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ImpMapActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }

            private void UnregisterCallbacks(IImpMapActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
            }

            public void RemoveCallbacks(IImpMapActions instance)
            {
                if (m_Wrapper.m_ImpMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IImpMapActions instance)
            {
                foreach (var item in m_Wrapper.m_ImpMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ImpMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ImpMapActions @ImpMap => new ImpMapActions(this);
        public interface IImpMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
    }
}
